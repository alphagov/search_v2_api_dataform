config {
    type: "incremental",
    database: "search-v2-api-staging",
    bigquery: {
        partitionBy: "PARTITIONTIME",
        requirePartitionFilter: true
    },
    schema: "search_api",
    name: "search-intraday"
}

pre_operations { 

MERGE INTO
  `${dataform.projectConfig.vars.project_id}.analytics_events_vertex.search-intraday-event` T
USING
  (
  WITH
    events AS (
    SELECT
      TIMESTAMP_TRUNC(TIMESTAMP_MICROS(ga.event_timestamp),DAY) AS eventDate,
      'search' AS eventType,
      ga.user_pseudo_id AS userPseudoId,
      FORMAT_TIMESTAMP("%FT%TZ",TIMESTAMP_MICROS(ga.event_timestamp)) AS eventTime,
      (
      SELECT
        value.string_value
      FROM
        UNNEST(event_params)
      WHERE
        KEY = 'search_term') AS searchQuery,
      SAFE_CAST(REGEXP_EXTRACT((
          SELECT
            value.string_value
          FROM
            UNNEST(event_params)
          WHERE
            KEY = 'page_location'), "page=(\\\\d+)" ) AS int64)-1 AS `offset`,
      REGEXP_EXTRACT((
        SELECT
          value.string_value
        FROM
          UNNEST(event_params)
        WHERE
          KEY = 'page_location'), "order=([a-zA-Z\\\\-]+)" ) AS orderBy,
      ARRAY_TO_STRING(REGEXP_EXTRACT_ALL((
          SELECT
            value.string_value
          FROM
            UNNEST(event_params)
          WHERE
            KEY = 'page_location'), "((?:level_one_taxon|level_two_taxon|content_purpose_supergroup%5B%5D|public_timestamp%5Bfrom%5D|public_timestamp%5Bto%5D)=(?:%20&%20|[^&])*)" ), "&") AS FILTER,
      (
      SELECT
        value.string_value
      FROM
        UNNEST(event_params)
      WHERE
        KEY = 'ab_test') AS ab_test,
      item_params.value.string_value AS id,
      MAX(item.item_id),
      item.item_list_index
    FROM
    `ga4-analytics-352613.analytics_330577055.events_intraday_${getGa4TableDate()}` ga,
      UNNEST(items) AS item,
      UNNEST(item.item_params) AS item_params
    WHERE
      (
      SELECT
        value.string_value
      FROM
        UNNEST(event_params)
      WHERE
        KEY = 'publishing_app') = "search-api"
      AND EXISTS (
      SELECT
        1
      FROM
        UNNEST(event_params)
      WHERE
        KEY = 'search_term')
      AND event_name='view_item_list'
      AND (((SAFE_CAST(REGEXP_EXTRACT((
                SELECT
                  value.string_value
                FROM
                  UNNEST(event_params)
                WHERE
                  KEY = 'page_location'), "page=(\\\\d+)" ) AS int64)-1) <10)
        OR ((SAFE_CAST(REGEXP_EXTRACT((
                SELECT
                  value.string_value
                FROM
                  UNNEST(event_params)
                WHERE
                  KEY = 'page_location'), "page=(\\\\d+)" ) AS int64)-1) IS NULL))
    GROUP BY
      eventDate,
      eventTime,
      userPseudoId,
      eventType,
      searchQuery,
      `offset`,
      orderBy,
      id,
      item_list_index,
      FILTER,
      ab_test )
  SELECT
    eventDate AS _PARTITIONTIME,
    eventType,
    userPseudoId,
    eventTime,
    CASE
      WHEN `offset` IS NULL THEN STRUCT(searchQuery, CASE
        WHEN orderBy = "relevance" THEN NULL
        ELSE orderBy
    END
      AS orderBy,
      0 AS `offset`)
      ELSE STRUCT(searchQuery,
      CASE
        WHEN orderBy = "relevance" THEN NULL
        ELSE orderBy
    END
      AS orderBy,
      `offset`)
  END
    AS searchInfo,
    CASE
      WHEN FILTER = '' THEN NULL
      ELSE FILTER
  END
    AS FILTER,
    CASE
      WHEN ab_test IS NOT NULL THEN ARRAY[ab_test]
  END
    AS tagIds,
    ARRAY_AGG(STRUCT(id AS id,
        CAST(NULL AS string) AS name)
    ORDER BY
      SAFE_CAST(item_list_index AS INT64) ) AS documents
  FROM
    events
  WHERE
    id IS NOT NULL
    AND searchQuery IS NOT NULL
  GROUP BY
    eventDate,
    eventTime,
    userPseudoId,
    eventType,
    searchQuery,
    `offset`,
    orderBy,
    FILTER,
    ab_test) S
ON
  T._PARTITIONTIME = S._PARTITIONTIME
  AND T.eventType = S.eventType
  AND T.userPseudoId = S.userPseudoId
  AND T.eventTime = S.eventTime
  AND TO_JSON_STRING(T.documents) = TO_JSON_STRING(S.documents)
  AND TO_JSON_STRING(S.searchInfo) = TO_JSON_STRING(T.searchInfo)
  AND IFNULL(S.filter,"") = IFNULL(T.filter,"")
  WHEN NOT MATCHED
  THEN
INSERT
  (_PARTITIONTIME,
    eventType,
    userPseudoId,
    eventTime,
    searchInfo,
    FILTER,
    tagIds,
    documents)
VALUES
  (_PARTITIONTIME, eventType, userPseudoId, eventTime, searchInfo, FILTER, tagIds, documents)
}

js {
    const getGa4TableDate = () => {
        const date = new Date();
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}${month}${day}`;
    };
}
